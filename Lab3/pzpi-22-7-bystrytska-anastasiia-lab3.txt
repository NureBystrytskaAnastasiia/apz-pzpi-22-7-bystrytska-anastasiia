Міністерство освіти і науки України 
Харківський національний університет радіоелектроніки





Кафедра «Програмної інженерії»



Дисципліна «Архітектура програмного
забезпечення» 
Лабораторна робота №3
«РОЗРОБКА ПРОГРАМНОЇ АРХІТЕКТУРИ, СТВОРЕННЯ ТА ВІДЛАГОДЖЕННЯ ПРОГРАМНОГО КОДУ ВЕБ –КЛІЄНТА ПРОГРАМНОЇ СИСТЕМИ»








Виконала:
ст. гр. ПЗПІ-22-7
Бистрицька А.І	Прийняв:
 ст. викл.
Сокорчук І.П

Харків – 2025
3 РОЗРОБКА ПРОГРАМНОЇ АРХІТЕКТУРИ, СТВОРЕННЯ ТА ВІДЛАГОДЖЕННЯ ПРОГРАМНОГО КОДУ ВЕБ – КЛІЄНТА ПРОГРАМНОЇ СИСТЕМИ
3.1 Історія змін
Таблиця 3.1 – Історія змін
№	Дата	Версія	Опис змін
1	15.06.2025	0.1	Створено «Історія Змін»
2	15.06.2025	0.1	Створено «Завдання»
3	15.06.2025	0.1	Створено «Опис виконаної роботи»
4	15.06.2025	0.1	Створено «Висновки»
5	15.06.2025	0.1	Створено «ДОДАТОК А»
6	15.06.2025	0.1	Створено «ДОДАТОК Б»
7	15.06.2025	0.1	Створено «ДОДАТОК В»

3.2 Завдання
Мета завдання - Розробити веб-клієнт програмної системи для автоматизації роботи аптечних мереж, який забезпечує повноцінну взаємодію користувачів з основними бізнес-процесами відповідно до їхніх ролей. Інтерфейс повинен підтримувати персоналізовані панелі для фармацевтів та адміністраторів. Для фармацевтів має бути реалізовано функціонал управління медикаментами, перегляду умов зберігання, обробки замовлень і отримання сповіщень. Для адміністраторів — інструменти керування користувачами, моніторингу активності, перегляду системних подій і виконання адміністративних дій. Веб-клієнт повинен забезпечити зручний, безпечний та ефективний доступ до системних функцій у межах ролі користувача.
3.3 Опис виконаної роботи 
3.3.1 Архітектура веб-частини системи
Веб-частина системи побудована на клієнт-серверній архітектурі та має модульну структуру. Кожна сторінка відповідає окремому функціональному модулю: реєстрація, авторизація, управління медикаментами, адміністрування, замовлення, приміщення тощо. Це забезпечує зручність у розробці, підтримці та подальшому розширенні.
3.3.2 Використані технології та інструменти
Інтерфейс розроблено за допомогою HTML, CSS та JavaScript. Для оформлення використано CSS-змінні, що дозволяє легко змінювати стиль додатку. Іконки взято з бібліотеки Font Awesome, а для графіків використано Chart.js. Це забезпечує сучасний вигляд та інтерактивність.
3.3.3 Реалізована функціональність
Система реалізує ключові функції для різних ролей користувачів:
Авторизація і реєстрація користувачів з різними правами доступу;
Управління  запасами  ліків включаючи CRUD можливості; 
Управління замовленнями   створення на основі наявних препаратів в системі, проведення замовлення  та генерування  накладних у вигляді  PDF-файлів;
Управління кімнатами включаючи CRUD можливості, при створені кімнати створюються датчики температури та вологи  та самі оновлюються;
Управління користувачами перегляд  всіх користувачів системи та видалення у разі звільнення;
Моніторинг статистики ліків та продаж у вигляді діаграми;
Симуляція продаж ліків та відображення  що саме та коли  було продано;
Функціональність адаптована під реальні потреби аптек, включаючи контроль за термінами придатності та залишками ліків.
3.3.4 Захист даних
Передбачено автентифікацію з перевіркою логіна і пароля, а також розмежування прав доступу залежно від ролі користувача (адміністратор, фармацевт). Дані користувача та сеанси захищені стандартними веб-засобами безпеки.
3.3.5 Взаємодія з сервером
Сторінки клієнта спілкуються з сервером через стандартні HTTP-запити до API. Дані передаються у форматі JSON. Для кожної операції передбачено окремий маршрут: наприклад, для отримання списку медикаментів або збереження нових записів.
3.3.6 Локалізація
Інтерфейс системи повністю адаптований для українських користувачів: всі підписи, кнопки та повідомлення українською мовою, враховано формати дат і цін.
3.3.7 Адміністративні можливості
Система передбачає окремий розділ для адміністраторів, де можна бачити статистику, керувати користувачами, контролювати замовлення і медикаменти. Також адміністратор може бачити попередження щодо закінчення терміну придатності ліків або критичного зниження залишків на складі.
3.4 Висновки 
У межах розробки веб-частини системи управління аптекою було створено адаптивний і зручний веб-додаток з підтримкою української мови, який включає модулі аутентифікації, авторизації, управління медикаментами, замовленнями, кімнатами з датчиками температури та вологості та користувачами. Реалізовано розмежування прав доступу для адміністратора і фармацевта, налаштовано обмін даними з сервером через REST API, а також забезпечено захист даних і стабільну роботу у сучасних браузерах. Для адміністративної панелі впроваджено базову аналітику та візуалізацію статистики, що дозволяє ефективно контролювати і керувати аптечним бізнесом онлайн.
 
ДОДАТОК А
Хронологічний опис та посилання:
Відео доповіді на Youtube: https://youtu.be/Zv1iaYF8F7o
Хронологічний опис доповіді:
00:00 Вступна частина 
00:23 Регістрація та вхід для адміністратора 
00:53 Адмін панель 
01:31 Статистика 
02:26 Симуляція продаж 
03:09 Управління ліками 
05:42 Управління кімнатами та сенсорами 
09:18 Управління користувачами 
09:48 Управління замовленнями 
13:07 Регістрація та вхід для фармацевта 
13:24 Панель фармацевта 
13:56 Управління замовленнями для фармацевта 
14:09 Моніторинг ліків для фармацевта 
14:19 Моніторинг кімнат для фармацевта
 
ДОДАТОК Б 
Графічні матеріали

 
Рисунок Б.1  - UML - діаграма прецедентів
 
Рисунок Б.2 - UML - діаграма компонентів

 
Рисунок Б.3 - UML - діаграма діяльності

	

 
Рисунок Б.4 - UML - діаграма станів

 
ДОДАТОК В
Програмний код
1.	Графічна статистика продажу ліків 
https://github.com/NureBystrytskaAnastasiia/apz-pzpi-22-7-bystrytska-anastasiia/blob/main/Lab3/pzpi-22-7-bystrytska-anastasiia-lab3/admin.html
function updateSalesChart(salesData) {
            const ctx = document.getElementById('salesChart').getContext('2d');
            
            if (salesChart) {
                salesChart.destroy();
            }
            
            if (!salesData || salesData.length === 0) {
                salesData = [{
                    date: new Date().toLocaleDateString('uk-UA'),
                    sales: 0,
                    revenue: 0
                }];
            }
            
            salesChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: salesData.map(item => item.date),
                    datasets: [
                        {
                            label: 'Кількість продажів',
                            data: salesData.map(item => item.sales || 0),
                            backgroundColor: 'rgba(54, 162, 235, 0.5)',
                            borderColor: 'rgba(54, 162, 235, 1)',
                            borderWidth: 1
                        },
                        {
                            label: 'Дохід (грн)',
                            data: salesData.map(item => item.revenue || 0),
                            backgroundColor: 'rgba(75, 192, 192, 0.5)',
                            borderColor: 'rgba(75, 192, 192, 1)',
                            borderWidth: 1,
                            type: 'line',
                            yAxisID: 'y1'
                        }
                    ]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        title: {
                            display: true,
                            text: 'Статистика продажів за останні дні'
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            title: { 
                                display: true, 
                                text: 'Кількість продажів' 
                            }
                        },
                        y1: {
                            position: 'right',
                            beginAtZero: true,
                            title: { 
                                display: true, 
                                text: 'Дохід (грн)' 
                            },
                            grid: { 
                                drawOnChartArea: false 
                            }
                        }
                    }
                }
            });
        }

2.	Симуляція  продажів
https://github.com/NureBystrytskaAnastasiia/apz-pzpi-22-7-bystrytska-anastasiia/blob/main/Lab3/pzpi-22-7-bystrytska-anastasiia-lab3/admin.html
 async function simulateSale() {
            try {
                const response = await fetch(`${API_URL}/medicines/simulate-sale`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' }
                });
                
                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.error || 'Помилка симуляції продажу');
                }
                
                const sale = await response.json();
                const now = new Date().toLocaleTimeString();
                
                const saleItem = document.createElement('div');
                saleItem.className = 'sale-item';
                saleItem.innerHTML = `
                    <p><strong>[${now}]</strong> Продано ${sale.sold} од. <strong>${sale.medicine}</strong> 
                    за ${(sale.price * sale.sold).toFixed(2)} грн. Залишок: ${sale.remaining}</p>
                `;
                
                const salesLog = document.getElementById('salesLog');
                if (salesLog.children.length > 50) {
                    salesLog.removeChild(salesLog.lastChild);
                }
                salesLog.insertBefore(saleItem, salesLog.firstChild);
                
                await loadStats();
                
            } catch (error) {
                console.error('Помилка симуляції продажу:', error);
                showAlert(`Помилка симуляції: ${error.message}`, 'error');
            }
        }

        function startSimulation() {
            if (!simulationInterval) {
                simulationActive = true;
                localStorage.setItem('simulationActive', 'true');
                simulationInterval = setInterval(simulateSale, 10000);
                showAlert('Симуляція продажів активована', 'info');
                
                document.getElementById('startSimBtn').disabled = true;
                document.getElementById('stopSimBtn').disabled = false;
                
                simulateSale();
            }
        }
        
        function stopSimulation() {
            if (simulationInterval) {
                clearInterval(simulationInterval);
                simulationInterval = null;
                simulationActive = false;
                localStorage.setItem('simulationActive', 'false');
                showAlert('Симуляція продажів зупинена', 'info');
                
                document.getElementById('startSimBtn').disabled = false;
                document.getElementById('stopSimBtn').disabled = true;
            }
        }

