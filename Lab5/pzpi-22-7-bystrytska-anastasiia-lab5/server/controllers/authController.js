const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const User = require('../models/User');
const sendEmail = require('../utils/sendEmail');
const nodemailer = require('nodemailer');



const register = async (req, res) => {
  const { email, password, name, role } = req.body;
  try {
    const existing = await User.findOne({ email });
    if (existing) return res.status(400).json({ message: 'Email already in use' });

    const hashedPassword = await bcrypt.hash(password, 10);
    const user = new User({ email, password: hashedPassword, name, role });
    await user.save();

    res.status(201).json({ message: 'User registered successfully' });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

const login = async (req, res) => {
  const { email, password } = req.body;
  try {
    const user = await User.findOne({ email });
    if (!user) return res.status(400).json({ message: 'Invalid credentials' });

    const valid = await bcrypt.compare(password, user.password);
    if (!valid) return res.status(400).json({ message: 'Invalid credentials' });

    const token = jwt.sign({ id: user._id, role: user.role }, process.env.JWT_SECRET, { expiresIn: '1d' });

    // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ —Å–µ—Å—ñ—ó
    req.session.userId = user._id;
    req.session.role = user.role;
    req.session.email = user.email;

    res.json({ token, user: { email: user.email, name: user.name, role: user.role } });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};


const forgotPassword = async (req, res) => {
  const { email } = req.body; // –æ—Ç—Ä–∏–º—É—î–º–æ email –∑ —Ç—ñ–ª–∞ –∑–∞–ø–∏—Ç—É
  
  try {
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —ñ—Å–Ω—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ç–∞–∫–∏–º email
    const user = await User.findOne({ email });
    if (!user) {
      return res.status(404).json({ message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ç–∞–∫–æ—é –ø–æ—à—Ç–æ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è
    const newPassword = Math.floor(10000000 + Math.random() * 90000000).toString();
    
    // –•–µ—à—É–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è
    const hashedPassword = await bcrypt.hash(newPassword, 10);
    user.password = hashedPassword; // –û–Ω–æ–≤–ª—é—î–º–æ –ø–∞—Ä–æ–ª—å –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
    await user.save(); // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–º—ñ–Ω–∏ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö

    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ—Ä—É –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ª–∏—Å—Ç–∞ —á–µ—Ä–µ–∑ Gmail
    const transporter = nodemailer.createTransport({
      service: 'gmail',
      auth: {
        user: 'anastasiia.bystrytska@nure.ua',
        pass: 'lszr tvgs bgwv qhhm', 
      }
    });

    const mailOptions = {
      from: '"Support Team" <anastasiia.bystrytska@nure.ua>',
      to: email,
      subject: '–í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—é –¥–æ –≤–∞—à–æ–≥–æ –∞–∫–∞—É–Ω—Ç—É',
      html: `
        <div style="font-family: 'Segoe UI', 'Roboto', 'Helvetica Neue', sans-serif; max-width: 600px; margin: 0 auto; background-color: #ffffff; border-radius: 10px; box-shadow: 0 4px 12px rgba(0,0,0,0.1); overflow: hidden;">
          <div style="background-color: #2c3e50; color: #ffffff; padding: 20px 30px;">
            <h2 style="margin: 0; font-weight: 600;">üîê –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—é</h2>
          </div>
          <div style="padding: 30px;">
            <p style="font-size: 16px;">–®–∞–Ω–æ–≤–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É,</p>
            <p style="font-size: 16px;">–ú–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ –∑–∞–ø–∏—Ç –Ω–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—é –¥–ª—è –≤–∞—à–æ–≥–æ –∞–∫–∞—É–Ω—Ç—É.</p>
    
            <div style="background-color: #ecf0f1; padding: 20px; margin: 25px 0; border-radius: 8px; text-align: center;">
              <p style="margin: 0; font-size: 18px;">–í–∞—à —Ç–∏–º—á–∞—Å–æ–≤–∏–π –ø–∞—Ä–æ–ª—å:</p>
              <p style="margin: 10px 0 0 0; font-size: 22px; font-weight: bold; color: #e74c3c;">${newPassword}</p>
            </div>
    
            <p style="font-size: 16px;">–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ü–µ–π –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥—É –≤ —Å–∏—Å—Ç–µ–º—É. –ü—ñ—Å–ª—è –≤—Ö–æ–¥—É –º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É—î–º–æ <strong>–Ω–µ–≥–∞–π–Ω–æ –∑–º—ñ–Ω–∏—Ç–∏ –π–æ–≥–æ</strong> —É –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö –ø—Ä–æ—Ñ—ñ–ª—é.</p>
    
            <p style="font-size: 14px; color: #7f8c8d;">–Ø–∫—â–æ –≤–∏ –Ω–µ –∑–∞–ø–∏—Ç—É–≤–∞–ª–∏ –∑–º—ñ–Ω—É –ø–∞—Ä–æ–ª—é, –ø—Ä–æ—ñ–≥–Ω–æ—Ä—É–π—Ç–µ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–±–æ –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –Ω–∞—à–æ—é —Å–ª—É–∂–±–æ—é –ø—ñ–¥—Ç—Ä–∏–º–∫–∏.</p>
    
            <p style="margin-top: 30px; font-size: 16px;">–ó –ø–æ–≤–∞–≥–æ—é,<br><strong>–ö–æ–º–∞–Ω–¥–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ Apteka</strong></p>
          </div>
        </div>
      `
    };
    
    // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ª–∏—Å—Ç–∞
    transporter.sendMail(mailOptions, (err, info) => {
      if (err) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ª–∏—Å—Ç–∞:', err);
        return res.status(500).json({ message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ª–∏—Å—Ç–∞' });
      }
      res.status(200).json({ message: '–ù–æ–≤–∏–π –ø–∞—Ä–æ–ª—å –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –Ω–∞ –ø–æ—à—Ç—É' });
    });
    
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};
const logout = (req, res) => {
  req.session.destroy(err => {
    if (err) {
      return res.status(500).json({ message: 'Failed to log out' });
    }
    res.clearCookie('connect.sid'); 
    res.json({ message: 'Logged out successfully' });
  });
};


module.exports = { register, login, forgotPassword, logout };
