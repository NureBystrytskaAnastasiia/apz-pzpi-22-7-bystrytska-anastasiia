Міністерство освіти і науки України
Харківський національний університет радіоелектроніки
 
 
  
Кафедра ПІ
 

 
Дисципліна «Архітектура програмного забезпечення»
Практична робота №2
«Архітектура відомих програмних систем»
 
 
  
 
Виконала:
ст. гр. ПЗПІ-22-7
Бистрицька А.І	 	Прийняв:
ст. викл. кафедри ПІ
Сокорчук І.П
 

Харків – 2025
1 ІСТОРІЯ ЗМІН

№	Дата 	Версія	Опис змін	Автор
1	14.05.25	0.1	Було створено розділ «Завдання».	Бистрицька Анастасія
2	14.05.25	0.1	Було створено розділ «Опис виконаної роботи».	Бистрицька Анастасія
3	14.05.25	0.1	Було створено розділ «Висновки з роботи»	Бистрицька Анастасія
4	14.05.25	0.1	Було створено розділ «Додаток А»	Бистрицька Анастасія
5	14.05.25	0.1	Було створено розділ «Додаток Б»	Бистрицька Анастасія

2 ЗАВДАННЯ
У рамках практичної роботи №2 з дисципліни «Архітектура програмного забезпечення» буде досліджено архітектуру Instagram — соціальної платформи для обміну фото- та відеоконтентом. Розглядатиметься, як виникла система, на яких технологіях була реалізована, зокрема Python та Django, та як відбувалося її масштабування. Буде проаналізовано загальну схему архітектури, побудову бази даних, систему кешування, обробку мультимедійного контенту, а також використання CDN для швидкої доставки медіа. Особливу увагу буде приділено тому, як платформа витримує велике навантаження та забезпечує стабільну роботу при мільйонах активних користувачів.
3 ОПИС ВИКОНАНОЇ РОБОТИ
3.1 Історія та масштаби
Instagram запущено в 2010 році як монолітну систему на Django та PostgreSQL. У 2012 році Facebook придбав платформу, розпочавши перехід до мікросервісів. Сьогодні Instagram використовує понад 500 мікросервісів. Вони розгорнуті на більш ніж 10 тисячах серверів. Система обробляє мільярди запитів щодня. Це забезпечує стабільність при високих навантаженнях. Масштабування дозволило Instagram стати глобальною платформою. Історія розвитку показує технологічну еволюцію. Платформа адаптувалася до зростання користувачів. Це приклад успішної трансформації.
3.2 Від моноліту до мікросервісів
Монолітна архітектура була простою для старту Instagram. Вона ускладнювала масштабування та мала низьку відмовостійкість. Мікросервіси розділили систему на незалежні компоненти. Кожен сервіс відповідає за окрему функцію, наприклад, стрічку. Це підвищує масштабованість і надійність. Оновлення компонентів відбувається без зупинки системи. Координація мікросервісів є складною, але ефективною. Такий підхід прискорює розробку. Мікросервіси стали основою Instagram. Це забезпечує гнучкість платформи.
3.3 Схема архітектури
Архітектура Instagram оптимізує обробку запитів. Запити надходять до API Gateway, який спрямовує їх до мікросервісів. Стрічка та коментарі обробляються окремо. Redis кешує стрічку для швидкості. Amazon S3 зберігає медіа. CloudFront забезпечує їх доставку. Затримка запитів — менше 100 мс у 95% випадків. Це гарантує швидкий відгук. Схема показує ефективну систему. Вона підтримує високе навантаження.
3.4 Бази даних та кешування
Cassandra — основна база Instagram із партиціонуванням. Реплікація з трьома копіями забезпечує надійність. Redis кешує стрічку (TTL 5 хвилин) і профілі (TTL 15 хвилин). Це знижує навантаження на базу в рази. Кешування прискорює доступ до даних. Cassandra і Redis гарантують стабільність. Такий підхід економить ресурси. Він підтримує масштабованість. Система працює швидко. Це ключ до ефективності.
3.5 Обробка медіа
Обробка медіа — основа Instagram. Фотографії конвертуються в WebP, зменшуючи розмір на 30%. Створюється 4-5 варіантів розмірів зображень. Відео стискаються кодеком VP9, економлячи 50% обсягу. Стиснення оптимізує завантаження. Обробка відбувається в реальному часі. Це забезпечує швидкість. Якість медіа залишається високою. Користувацький досвід є пріоритетом. Instagram оптимізує медіа для зручності.
3.6 CDN та оптимізація
Instagram використовує CDN від Akamai та Facebook. Сервери в 50+ країнах знижують затримки. Затримка скоротилася з 200 мс до 30-50 мс. CDN балансує навантаження. Це критично при піковій активності. Оптимізація економить трафік. Користувачі отримують швидкий доступ. CDN — основа глобальної доставки. Це підвищує ефективність. Instagram працює стабільно.
3.7 API та клієнти
REST API підтримує мобільні додатки Instagram. GraphQL використовується для веб-версії. GraphQL зменшує кількість запитів. Наприклад, можна отримати лише лайки. Це прискорює завантаження. API забезпечує гнучкість. Мобільні та веб-версії синхронізовані. Підхід підтримує різні пристрої. API покращує користувацький досвід. Instagram залишається універсальним.
3.8 Алгоритми рекомендацій
Алгоритми рекомендацій базуються на TensorFlow. Вони аналізують час перегляду. Лайки та коментарі впливають на стрічку. Геолокація пропонує релевантний контент. Це підвищує залученість. Алгоритми адаптуються до користувачів. Стрічка є персоналізованою. Вони постійно вдосконалюються. Рекомендації — ключ до успіху. Instagram утримує увагу користувачів.
3.9 Безпека даних
Безпека Instagram базується на HTTPS і TLS 1.3. Дані шифруються AES-256. Авторизація — через OAuth 2.0. Щодня блокується 10+ мільйонів спам-запитів. Захист від DDoS-атак є обов’язковим. Це забезпечує конфіденційність. Instagram інвестує в захист. Користувачі довіряють платформі. Безпека підтримує репутацію. Дані залишаються захищеними.
4 ВИСНОВКИ З РОБОТИ
У процесі дослідження було розглянуто, як з’явилася платформа Instagram, з чого починалась її розробка та як поступово зростала і змінювалася її архітектура. Було проаналізовано ключові етапи технічної еволюції системи: від простої структури до розподіленої архітектури, здатної обслуговувати мільйони користувачів щодня. Особливу увагу приділено організації бази даних, системам кешування, обробці медіафайлів та використанню CDN для ефективної доставки контенту. Дослідження дало змогу зрозуміти, як складні платформи адаптуються до зростання навантаження і які рішення приймаються для забезпечення швидкодії, стабільності та масштабованості. 
ДОДАТОК А
Відеозапис доповіді на YouTube: https://youtu.be/aqn2bD-lLGo
Хронологічний опис доповіді:
00:00 Вступна частина 
00:08 Зміст 
00:22 Вступ 
01:27 Історія та маштаби 
02:30 Від моноліту до мікросервісів 
03:43 Схема архітектури 
04:58 База даних та кешування 
06:10 Обробка медіа 
07:26 CDN так оптимізація 
08:36 API та клієнти 
09:43 Алгоритми рекомендацій 
10:44 безпека даних 
11:58 Висновки 
12:19 Джерела інформації
 
ДОДАТОК Б
 Рисунок Б.1 – Титульний слайд презентації
 
Рисунок Б.2 - Зміст презентації
 
Рисунок Б.3 – Вступ
 
Рисунок Б.4 – Історія та маштаби
 
Рисунок Б.5 – Від моноліту до мікросервісів
 
Рисунок Б.6 – Схема архітектури
 
Рисунок Б.7 – Бази даних та кешування
 
Рисунок Б.8 – Обробка медіа
 
Рисунок Б.9 – CDN оптимізація 
 
Рисунок Б.10 – API  та клієнти
 
Рисунок Б.11 – Алгоритми рекомендацій 
 
Рисунок Б.12 – Безпека даних
 
Рисунок Б.13 – Висновки 
 
Рисунок Б.14 – Використані джерела інформації 

